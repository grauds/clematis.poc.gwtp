
var room_name;
var lector = false;
var rec_file;
var so, sd;
var rec_stream;
var max_students = 10;


application.onAppStart = function(){
	trace("onAppStart");
  so = SharedObject.get("core", true);
  so.setProperty("lector", false);
  so.setProperty("students", {});
  sd = SharedObject.get("core_dialog", true);
  sd.setProperty("students", {});
	}
	
application.onAppStop = function(){
	trace("onAppStop");
 
  so.setProperty("lector", false);
  so.setProperty("students", {});
  sd.setProperty("students", {});
	}
	
application.onDisconnect= function(client){
	trace("onDisConnect "+client.login);
  
  switch(client.type){
    case "lector":
      room_name = "";
      rec_file = "";
      lector = false;
      
      so.setProperty("lector", false);
      
      break;
      
    case "student":
      
      var data = so.getProperty("students");
      delete(data[client.login]);
      so.setProperty("students", data);
      if(lector){lector.call("delete_student", null, client.login);}
      break;
  }
  
	}


	
application.onConnect = function(client, props){
	trace("onConnect "+props.login);
  if(!has_online(props.login)){
      switch(props.type){
        case "lector":
          room_name = props.room;
          rec_file = room_name;
          max_students = props.max_students;
          client.login = props.login;
          client.type = "lector";
          lector = client;
          so.setProperty("lector", props);
          application.acceptConnection(client);
          break;
      
      case "student":
        var max;
        if(application.clients.length>(max_students+1)){
          var obj = {};
          obj.error = "limit max students";
          application.rejectConnection(client, obj);
        }else{
          client.login = props.login;
          client.type = "student";
          var data = so.getProperty("students");
          data[props.login] = props;
          so.setProperty("students", data);
          if(lector){lector.call("add_student", null, props);}
          application.acceptConnection(client);
        }
        break;
    }
  
  }else{
    var obj = {};
    obj.error = "user exists";
    application.rejectConnection(client, obj);
  }
  
  
  
	}


function has_online(login){
  if(login=="lector"){
    if(lector){return true;}
    else{return false;}
  }else{
    var data = so.getProperty("students");
    if(data[login]!= undefined){return true;}
    else{return false;}
  }

}

	
Client.prototype.record_start = function(){
  rec_stream = Stream.get(rec_file);
  rec_stream.record();
  rec_stream.play("lector");
  
  return true;
}

Client.prototype.record_continue = function(nsname){
  rec_stream.record(false);
  rec_stream.record("append");
  rec_stream.play(nsname);
  
  return true;
}

Client.prototype.record_stop = function(){
  rec_stream.record(false);
  
  return true;
}
	
